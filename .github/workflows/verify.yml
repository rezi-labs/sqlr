name: verify

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  # Verifies all tests pass
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the whole history and tags.
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2

      - name: install hurl
        uses: rezi-labs/install-hurl@main

      - name: install just
        uses: rezi-labs/install-just@main

      - run: just verify

  # Prepare a release PR or release
  release:
    needs: verify
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      released: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4
      - id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}
          release-type: rust

  # Build and upload binaries when a release is created
  build-binaries:
    needs: release
    if: ${{ needs.release.outputs.released }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: sqlc-gen-rust-x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: sqlc-gen-rust-x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: sqlc-gen-rust-aarch64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
            name: sqlc-gen-rust-x86_64-apple-darwin
          - target: aarch64-apple-darwin
            os: macos-latest
            name: sqlc-gen-rust-aarch64-apple-darwin
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: sqlc-gen-rust-x86_64-pc-windows-msvc.exe
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz sqlc-gen-rust
          cd ../../../

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip sqlc-gen-rust.exe
          cd ../../../

      - name: Upload binary to release (Unix)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}.tar.gz
          tag_name: ${{ needs.release.outputs.tag_name }}

      - name: Upload binary to release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}.zip
          tag_name: ${{ needs.release.outputs.tag_name }}